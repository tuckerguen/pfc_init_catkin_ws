// Generated by gencpp from file uv_msgs/pf_reseedRequest.msg
// DO NOT EDIT!


#ifndef UV_MSGS_MESSAGE_PF_RESEEDREQUEST_H
#define UV_MSGS_MESSAGE_PF_RESEEDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uv_msgs
{
template <class ContainerAllocator>
struct pf_reseedRequest_
{
  typedef pf_reseedRequest_<ContainerAllocator> Type;

  pf_reseedRequest_()
    : x_min(0.0)
    , x_max(0.0)
    , x_inc(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , y_inc(0.0)
    , z_min(0.0)
    , z_max(0.0)
    , z_inc(0.0)
    , r_min(0.0)
    , r_max(0.0)
    , r_inc(0.0)
    , p_min(0.0)
    , p_max(0.0)
    , p_inc(0.0)
    , w_min(0.0)
    , w_max(0.0)
    , w_inc(0.0)
    , seeds_per(0)
    , seeds_std_t(0.0)
    , seeds_std_r(0.0)
    , cycle_std_t(0.0)
    , cycle_std_r(0.0)  {
    }
  pf_reseedRequest_(const ContainerAllocator& _alloc)
    : x_min(0.0)
    , x_max(0.0)
    , x_inc(0.0)
    , y_min(0.0)
    , y_max(0.0)
    , y_inc(0.0)
    , z_min(0.0)
    , z_max(0.0)
    , z_inc(0.0)
    , r_min(0.0)
    , r_max(0.0)
    , r_inc(0.0)
    , p_min(0.0)
    , p_max(0.0)
    , p_inc(0.0)
    , w_min(0.0)
    , w_max(0.0)
    , w_inc(0.0)
    , seeds_per(0)
    , seeds_std_t(0.0)
    , seeds_std_r(0.0)
    , cycle_std_t(0.0)
    , cycle_std_r(0.0)  {
  (void)_alloc;
    }



   typedef float _x_min_type;
  _x_min_type x_min;

   typedef float _x_max_type;
  _x_max_type x_max;

   typedef float _x_inc_type;
  _x_inc_type x_inc;

   typedef float _y_min_type;
  _y_min_type y_min;

   typedef float _y_max_type;
  _y_max_type y_max;

   typedef float _y_inc_type;
  _y_inc_type y_inc;

   typedef float _z_min_type;
  _z_min_type z_min;

   typedef float _z_max_type;
  _z_max_type z_max;

   typedef float _z_inc_type;
  _z_inc_type z_inc;

   typedef float _r_min_type;
  _r_min_type r_min;

   typedef float _r_max_type;
  _r_max_type r_max;

   typedef float _r_inc_type;
  _r_inc_type r_inc;

   typedef float _p_min_type;
  _p_min_type p_min;

   typedef float _p_max_type;
  _p_max_type p_max;

   typedef float _p_inc_type;
  _p_inc_type p_inc;

   typedef float _w_min_type;
  _w_min_type w_min;

   typedef float _w_max_type;
  _w_max_type w_max;

   typedef float _w_inc_type;
  _w_inc_type w_inc;

   typedef int32_t _seeds_per_type;
  _seeds_per_type seeds_per;

   typedef float _seeds_std_t_type;
  _seeds_std_t_type seeds_std_t;

   typedef float _seeds_std_r_type;
  _seeds_std_r_type seeds_std_r;

   typedef float _cycle_std_t_type;
  _cycle_std_t_type cycle_std_t;

   typedef float _cycle_std_r_type;
  _cycle_std_r_type cycle_std_r;





  typedef boost::shared_ptr< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pf_reseedRequest_

typedef ::uv_msgs::pf_reseedRequest_<std::allocator<void> > pf_reseedRequest;

typedef boost::shared_ptr< ::uv_msgs::pf_reseedRequest > pf_reseedRequestPtr;
typedef boost::shared_ptr< ::uv_msgs::pf_reseedRequest const> pf_reseedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uv_msgs::pf_reseedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uv_msgs::pf_reseedRequest_<ContainerAllocator1> & lhs, const ::uv_msgs::pf_reseedRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x_min == rhs.x_min &&
    lhs.x_max == rhs.x_max &&
    lhs.x_inc == rhs.x_inc &&
    lhs.y_min == rhs.y_min &&
    lhs.y_max == rhs.y_max &&
    lhs.y_inc == rhs.y_inc &&
    lhs.z_min == rhs.z_min &&
    lhs.z_max == rhs.z_max &&
    lhs.z_inc == rhs.z_inc &&
    lhs.r_min == rhs.r_min &&
    lhs.r_max == rhs.r_max &&
    lhs.r_inc == rhs.r_inc &&
    lhs.p_min == rhs.p_min &&
    lhs.p_max == rhs.p_max &&
    lhs.p_inc == rhs.p_inc &&
    lhs.w_min == rhs.w_min &&
    lhs.w_max == rhs.w_max &&
    lhs.w_inc == rhs.w_inc &&
    lhs.seeds_per == rhs.seeds_per &&
    lhs.seeds_std_t == rhs.seeds_std_t &&
    lhs.seeds_std_r == rhs.seeds_std_r &&
    lhs.cycle_std_t == rhs.cycle_std_t &&
    lhs.cycle_std_r == rhs.cycle_std_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uv_msgs::pf_reseedRequest_<ContainerAllocator1> & lhs, const ::uv_msgs::pf_reseedRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8006912f51d466cdce45b87831718287";
  }

  static const char* value(const ::uv_msgs::pf_reseedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8006912f51d466cdULL;
  static const uint64_t static_value2 = 0xce45b87831718287ULL;
};

template<class ContainerAllocator>
struct DataType< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uv_msgs/pf_reseedRequest";
  }

  static const char* value(const ::uv_msgs::pf_reseedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Uniform grid descriptors\n"
"float32 x_min\n"
"float32 x_max\n"
"float32 x_inc\n"
"\n"
"float32 y_min\n"
"float32 y_max\n"
"float32 y_inc\n"
"\n"
"float32 z_min\n"
"float32 z_max\n"
"float32 z_inc\n"
"\n"
"float32 r_min\n"
"float32 r_max\n"
"float32 r_inc\n"
"\n"
"float32 p_min\n"
"float32 p_max\n"
"float32 p_inc\n"
"\n"
"float32 w_min\n"
"float32 w_max\n"
"float32 w_inc\n"
"\n"
"#Normal distribution descriptors\n"
"int32 seeds_per\n"
"float32 seeds_std_t\n"
"float32 seeds_std_r\n"
"\n"
"float32 cycle_std_t\n"
"float32 cycle_std_r\n"
"\n"
;
  }

  static const char* value(const ::uv_msgs::pf_reseedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_min);
      stream.next(m.x_max);
      stream.next(m.x_inc);
      stream.next(m.y_min);
      stream.next(m.y_max);
      stream.next(m.y_inc);
      stream.next(m.z_min);
      stream.next(m.z_max);
      stream.next(m.z_inc);
      stream.next(m.r_min);
      stream.next(m.r_max);
      stream.next(m.r_inc);
      stream.next(m.p_min);
      stream.next(m.p_max);
      stream.next(m.p_inc);
      stream.next(m.w_min);
      stream.next(m.w_max);
      stream.next(m.w_inc);
      stream.next(m.seeds_per);
      stream.next(m.seeds_std_t);
      stream.next(m.seeds_std_r);
      stream.next(m.cycle_std_t);
      stream.next(m.cycle_std_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pf_reseedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uv_msgs::pf_reseedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uv_msgs::pf_reseedRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_min: ";
    Printer<float>::stream(s, indent + "  ", v.x_min);
    s << indent << "x_max: ";
    Printer<float>::stream(s, indent + "  ", v.x_max);
    s << indent << "x_inc: ";
    Printer<float>::stream(s, indent + "  ", v.x_inc);
    s << indent << "y_min: ";
    Printer<float>::stream(s, indent + "  ", v.y_min);
    s << indent << "y_max: ";
    Printer<float>::stream(s, indent + "  ", v.y_max);
    s << indent << "y_inc: ";
    Printer<float>::stream(s, indent + "  ", v.y_inc);
    s << indent << "z_min: ";
    Printer<float>::stream(s, indent + "  ", v.z_min);
    s << indent << "z_max: ";
    Printer<float>::stream(s, indent + "  ", v.z_max);
    s << indent << "z_inc: ";
    Printer<float>::stream(s, indent + "  ", v.z_inc);
    s << indent << "r_min: ";
    Printer<float>::stream(s, indent + "  ", v.r_min);
    s << indent << "r_max: ";
    Printer<float>::stream(s, indent + "  ", v.r_max);
    s << indent << "r_inc: ";
    Printer<float>::stream(s, indent + "  ", v.r_inc);
    s << indent << "p_min: ";
    Printer<float>::stream(s, indent + "  ", v.p_min);
    s << indent << "p_max: ";
    Printer<float>::stream(s, indent + "  ", v.p_max);
    s << indent << "p_inc: ";
    Printer<float>::stream(s, indent + "  ", v.p_inc);
    s << indent << "w_min: ";
    Printer<float>::stream(s, indent + "  ", v.w_min);
    s << indent << "w_max: ";
    Printer<float>::stream(s, indent + "  ", v.w_max);
    s << indent << "w_inc: ";
    Printer<float>::stream(s, indent + "  ", v.w_inc);
    s << indent << "seeds_per: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seeds_per);
    s << indent << "seeds_std_t: ";
    Printer<float>::stream(s, indent + "  ", v.seeds_std_t);
    s << indent << "seeds_std_r: ";
    Printer<float>::stream(s, indent + "  ", v.seeds_std_r);
    s << indent << "cycle_std_t: ";
    Printer<float>::stream(s, indent + "  ", v.cycle_std_t);
    s << indent << "cycle_std_r: ";
    Printer<float>::stream(s, indent + "  ", v.cycle_std_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UV_MSGS_MESSAGE_PF_RESEEDREQUEST_H
