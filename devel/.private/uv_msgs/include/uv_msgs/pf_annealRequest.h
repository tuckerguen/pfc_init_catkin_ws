// Generated by gencpp from file uv_msgs/pf_annealRequest.msg
// DO NOT EDIT!


#ifndef UV_MSGS_MESSAGE_PF_ANNEALREQUEST_H
#define UV_MSGS_MESSAGE_PF_ANNEALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uv_msgs
{
template <class ContainerAllocator>
struct pf_annealRequest_
{
  typedef pf_annealRequest_<ContainerAllocator> Type;

  pf_annealRequest_()
    : a_factor_init(0.0)
    , a_const(0.0)
    , a_floor(0.0)  {
    }
  pf_annealRequest_(const ContainerAllocator& _alloc)
    : a_factor_init(0.0)
    , a_const(0.0)
    , a_floor(0.0)  {
  (void)_alloc;
    }



   typedef float _a_factor_init_type;
  _a_factor_init_type a_factor_init;

   typedef float _a_const_type;
  _a_const_type a_const;

   typedef float _a_floor_type;
  _a_floor_type a_floor;





  typedef boost::shared_ptr< ::uv_msgs::pf_annealRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uv_msgs::pf_annealRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pf_annealRequest_

typedef ::uv_msgs::pf_annealRequest_<std::allocator<void> > pf_annealRequest;

typedef boost::shared_ptr< ::uv_msgs::pf_annealRequest > pf_annealRequestPtr;
typedef boost::shared_ptr< ::uv_msgs::pf_annealRequest const> pf_annealRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uv_msgs::pf_annealRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uv_msgs::pf_annealRequest_<ContainerAllocator1> & lhs, const ::uv_msgs::pf_annealRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a_factor_init == rhs.a_factor_init &&
    lhs.a_const == rhs.a_const &&
    lhs.a_floor == rhs.a_floor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uv_msgs::pf_annealRequest_<ContainerAllocator1> & lhs, const ::uv_msgs::pf_annealRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uv_msgs::pf_annealRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_msgs::pf_annealRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_msgs::pf_annealRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6291b620f34cf0f1f6b982289d0728a6";
  }

  static const char* value(const ::uv_msgs::pf_annealRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6291b620f34cf0f1ULL;
  static const uint64_t static_value2 = 0xf6b982289d0728a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uv_msgs/pf_annealRequest";
  }

  static const char* value(const ::uv_msgs::pf_annealRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a_factor_init\n"
"\n"
"float32 a_const\n"
"float32 a_floor\n"
"\n"
;
  }

  static const char* value(const ::uv_msgs::pf_annealRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a_factor_init);
      stream.next(m.a_const);
      stream.next(m.a_floor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pf_annealRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uv_msgs::pf_annealRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uv_msgs::pf_annealRequest_<ContainerAllocator>& v)
  {
    s << indent << "a_factor_init: ";
    Printer<float>::stream(s, indent + "  ", v.a_factor_init);
    s << indent << "a_const: ";
    Printer<float>::stream(s, indent + "  ", v.a_const);
    s << indent << "a_floor: ";
    Printer<float>::stream(s, indent + "  ", v.a_floor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UV_MSGS_MESSAGE_PF_ANNEALREQUEST_H
