// Generated by gencpp from file uv_msgs/pf_graspRequest.msg
// DO NOT EDIT!


#ifndef UV_MSGS_MESSAGE_PF_GRASPREQUEST_H
#define UV_MSGS_MESSAGE_PF_GRASPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace uv_msgs
{
template <class ContainerAllocator>
struct pf_graspRequest_
{
  typedef pf_graspRequest_<ContainerAllocator> Type;

  pf_graspRequest_()
    : psm(0)
    , grasp_transform()  {
    }
  pf_graspRequest_(const ContainerAllocator& _alloc)
    : psm(0)
    , grasp_transform(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _psm_type;
  _psm_type psm;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _grasp_transform_type;
  _grasp_transform_type grasp_transform;





  typedef boost::shared_ptr< ::uv_msgs::pf_graspRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uv_msgs::pf_graspRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pf_graspRequest_

typedef ::uv_msgs::pf_graspRequest_<std::allocator<void> > pf_graspRequest;

typedef boost::shared_ptr< ::uv_msgs::pf_graspRequest > pf_graspRequestPtr;
typedef boost::shared_ptr< ::uv_msgs::pf_graspRequest const> pf_graspRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uv_msgs::pf_graspRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uv_msgs::pf_graspRequest_<ContainerAllocator1> & lhs, const ::uv_msgs::pf_graspRequest_<ContainerAllocator2> & rhs)
{
  return lhs.psm == rhs.psm &&
    lhs.grasp_transform == rhs.grasp_transform;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uv_msgs::pf_graspRequest_<ContainerAllocator1> & lhs, const ::uv_msgs::pf_graspRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uv_msgs::pf_graspRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uv_msgs::pf_graspRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uv_msgs::pf_graspRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4e1347e0659cf266ea224371171d810";
  }

  static const char* value(const ::uv_msgs::pf_graspRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4e1347e0659cf26ULL;
  static const uint64_t static_value2 = 0x6ea224371171d810ULL;
};

template<class ContainerAllocator>
struct DataType< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uv_msgs/pf_graspRequest";
  }

  static const char* value(const ::uv_msgs::pf_graspRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 psm\n"
"geometry_msgs/Transform grasp_transform\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::uv_msgs::pf_graspRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.psm);
      stream.next(m.grasp_transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pf_graspRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uv_msgs::pf_graspRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uv_msgs::pf_graspRequest_<ContainerAllocator>& v)
  {
    s << indent << "psm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.psm);
    s << indent << "grasp_transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_transform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UV_MSGS_MESSAGE_PF_GRASPREQUEST_H
