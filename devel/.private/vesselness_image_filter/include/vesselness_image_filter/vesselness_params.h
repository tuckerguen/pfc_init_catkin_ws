// Generated by gencpp from file vesselness_image_filter/vesselness_params.msg
// DO NOT EDIT!


#ifndef VESSELNESS_IMAGE_FILTER_MESSAGE_VESSELNESS_PARAMS_H
#define VESSELNESS_IMAGE_FILTER_MESSAGE_VESSELNESS_PARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vesselness_image_filter
{
template <class ContainerAllocator>
struct vesselness_params_
{
  typedef vesselness_params_<ContainerAllocator> Type;

  vesselness_params_()
    : hessianSide(0)
    , hessianVariance(0.0)
    , postProcessSide(0)
    , postProcessVariance(0.0)
    , cParameter(0.0)
    , betaParameter(0.0)  {
    }
  vesselness_params_(const ContainerAllocator& _alloc)
    : hessianSide(0)
    , hessianVariance(0.0)
    , postProcessSide(0)
    , postProcessVariance(0.0)
    , cParameter(0.0)
    , betaParameter(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _hessianSide_type;
  _hessianSide_type hessianSide;

   typedef float _hessianVariance_type;
  _hessianVariance_type hessianVariance;

   typedef int32_t _postProcessSide_type;
  _postProcessSide_type postProcessSide;

   typedef float _postProcessVariance_type;
  _postProcessVariance_type postProcessVariance;

   typedef float _cParameter_type;
  _cParameter_type cParameter;

   typedef float _betaParameter_type;
  _betaParameter_type betaParameter;





  typedef boost::shared_ptr< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> const> ConstPtr;

}; // struct vesselness_params_

typedef ::vesselness_image_filter::vesselness_params_<std::allocator<void> > vesselness_params;

typedef boost::shared_ptr< ::vesselness_image_filter::vesselness_params > vesselness_paramsPtr;
typedef boost::shared_ptr< ::vesselness_image_filter::vesselness_params const> vesselness_paramsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vesselness_image_filter::vesselness_params_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vesselness_image_filter::vesselness_params_<ContainerAllocator1> & lhs, const ::vesselness_image_filter::vesselness_params_<ContainerAllocator2> & rhs)
{
  return lhs.hessianSide == rhs.hessianSide &&
    lhs.hessianVariance == rhs.hessianVariance &&
    lhs.postProcessSide == rhs.postProcessSide &&
    lhs.postProcessVariance == rhs.postProcessVariance &&
    lhs.cParameter == rhs.cParameter &&
    lhs.betaParameter == rhs.betaParameter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vesselness_image_filter::vesselness_params_<ContainerAllocator1> & lhs, const ::vesselness_image_filter::vesselness_params_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vesselness_image_filter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd9bad96ef213bdcb1da7e46c4b24609";
  }

  static const char* value(const ::vesselness_image_filter::vesselness_params_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd9bad96ef213bdcULL;
  static const uint64_t static_value2 = 0xb1da7e46c4b24609ULL;
};

template<class ContainerAllocator>
struct DataType< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vesselness_image_filter/vesselness_params";
  }

  static const char* value(const ::vesselness_image_filter::vesselness_params_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Standard message to define the vesselness filter parameters\n"
"\n"
"# pre process kernel size.\n"
"int32 hessianSide\n"
"\n"
"# pre process variance\n"
"float32 hessianVariance\n"
"\n"
"# post process kernel size\n"
"int32 postProcessSide\n"
"\n"
"# post process variance\n"
"float32 postProcessVariance\n"
"\n"
"# eigen value norm param\n"
"float32 cParameter\n"
"\n"
"# eigen value ratio param\n"
"float32 betaParameter\n"
;
  }

  static const char* value(const ::vesselness_image_filter::vesselness_params_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hessianSide);
      stream.next(m.hessianVariance);
      stream.next(m.postProcessSide);
      stream.next(m.postProcessVariance);
      stream.next(m.cParameter);
      stream.next(m.betaParameter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vesselness_params_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vesselness_image_filter::vesselness_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vesselness_image_filter::vesselness_params_<ContainerAllocator>& v)
  {
    s << indent << "hessianSide: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hessianSide);
    s << indent << "hessianVariance: ";
    Printer<float>::stream(s, indent + "  ", v.hessianVariance);
    s << indent << "postProcessSide: ";
    Printer<int32_t>::stream(s, indent + "  ", v.postProcessSide);
    s << indent << "postProcessVariance: ";
    Printer<float>::stream(s, indent + "  ", v.postProcessVariance);
    s << indent << "cParameter: ";
    Printer<float>::stream(s, indent + "  ", v.cParameter);
    s << indent << "betaParameter: ";
    Printer<float>::stream(s, indent + "  ", v.betaParameter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VESSELNESS_IMAGE_FILTER_MESSAGE_VESSELNESS_PARAMS_H
