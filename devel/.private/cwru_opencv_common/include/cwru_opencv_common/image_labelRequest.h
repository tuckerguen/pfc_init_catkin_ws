// Generated by gencpp from file cwru_opencv_common/image_labelRequest.msg
// DO NOT EDIT!


#ifndef CWRU_OPENCV_COMMON_MESSAGE_IMAGE_LABELREQUEST_H
#define CWRU_OPENCV_COMMON_MESSAGE_IMAGE_LABELREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cwru_opencv_common
{
template <class ContainerAllocator>
struct image_labelRequest_
{
  typedef image_labelRequest_<ContainerAllocator> Type;

  image_labelRequest_()
    : requestedPoints(0)  {
    }
  image_labelRequest_(const ContainerAllocator& _alloc)
    : requestedPoints(0)  {
  (void)_alloc;
    }



   typedef int32_t _requestedPoints_type;
  _requestedPoints_type requestedPoints;





  typedef boost::shared_ptr< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct image_labelRequest_

typedef ::cwru_opencv_common::image_labelRequest_<std::allocator<void> > image_labelRequest;

typedef boost::shared_ptr< ::cwru_opencv_common::image_labelRequest > image_labelRequestPtr;
typedef boost::shared_ptr< ::cwru_opencv_common::image_labelRequest const> image_labelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator1> & lhs, const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.requestedPoints == rhs.requestedPoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator1> & lhs, const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cwru_opencv_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "067b1e94aafe7ca3f25690430a788f47";
  }

  static const char* value(const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x067b1e94aafe7ca3ULL;
  static const uint64_t static_value2 = 0xf25690430a788f47ULL;
};

template<class ContainerAllocator>
struct DataType< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cwru_opencv_common/image_labelRequest";
  }

  static const char* value(const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service is meant to label an image using user clicks.\n"
"\n"
"#Call\n"
"\n"
"#Number of requested points.\n"
"int32 requestedPoints\n"
"\n"
;
  }

  static const char* value(const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.requestedPoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_labelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cwru_opencv_common::image_labelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cwru_opencv_common::image_labelRequest_<ContainerAllocator>& v)
  {
    s << indent << "requestedPoints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.requestedPoints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CWRU_OPENCV_COMMON_MESSAGE_IMAGE_LABELREQUEST_H
