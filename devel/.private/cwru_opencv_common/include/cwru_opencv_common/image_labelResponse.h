// Generated by gencpp from file cwru_opencv_common/image_labelResponse.msg
// DO NOT EDIT!


#ifndef CWRU_OPENCV_COMMON_MESSAGE_IMAGE_LABELRESPONSE_H
#define CWRU_OPENCV_COMMON_MESSAGE_IMAGE_LABELRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace cwru_opencv_common
{
template <class ContainerAllocator>
struct image_labelResponse_
{
  typedef image_labelResponse_<ContainerAllocator> Type;

  image_labelResponse_()
    : pointsResp()  {
    }
  image_labelResponse_(const ContainerAllocator& _alloc)
    : pointsResp(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _pointsResp_type;
  _pointsResp_type pointsResp;





  typedef boost::shared_ptr< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> const> ConstPtr;

}; // struct image_labelResponse_

typedef ::cwru_opencv_common::image_labelResponse_<std::allocator<void> > image_labelResponse;

typedef boost::shared_ptr< ::cwru_opencv_common::image_labelResponse > image_labelResponsePtr;
typedef boost::shared_ptr< ::cwru_opencv_common::image_labelResponse const> image_labelResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator1> & lhs, const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pointsResp == rhs.pointsResp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator1> & lhs, const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cwru_opencv_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93dc2f226a7d85f0c66d559d549ac7d8";
  }

  static const char* value(const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93dc2f226a7d85f0ULL;
  static const uint64_t static_value2 = 0xc66d559d549ac7d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cwru_opencv_common/image_labelResponse";
  }

  static const char* value(const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#list of response points:\n"
"geometry_msgs/Polygon pointsResp\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pointsResp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_labelResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cwru_opencv_common::image_labelResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cwru_opencv_common::image_labelResponse_<ContainerAllocator>& v)
  {
    s << indent << "pointsResp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.pointsResp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CWRU_OPENCV_COMMON_MESSAGE_IMAGE_LABELRESPONSE_H
